my edits... from branch "post_delete" 04/26/2019

stions:

1. How do I determine the time frame that this script will run?
- I don't think we've gone over this in the tutorial yet...
- We manually inserted the articles into the DB.

2. Will the articles get replaced every time the script runs, or
will my database keep getting larger with all of the articles I collect?

3. How did the articles get in the DB again?

4. How do I insert articles???? does the 1 source id mean that I'll only insert the article
with that source_id???

5. From the form online, how did I input the rss feed into the db?

Things I'm going to add (or have added) (04/25/2019):

1. delete after x days function
2. CSS to display four boxes
3. a call to insert the articles after the new source has been added in the
/sources route...
4. I want to make use crontab to run, run.py
5. I want to create a file to clear the cache so I don't have to do it manually!
6. fix the sources body tags! (Summary/description)

Notes:

app.py connects to the DB.


----

04/16/2019
-How do I delete a source from the DB?
go into mysql db and ... DELETE FROM source WHERE id = 4;

What I've figured out:
1. How to have separate divs containing only the articles from a singular news source
[setting up the __init__.py file route to create a method that inputs this data]

2. Making the CSS such that the boxes show up in a grid pattern.

3. Using jinja2 and python to access the title of the source for the title above the boxes
it turns out each article is within a <> format in a list, but it can be accessed as an
element of a list, i.e. list[0].source.title {{ }}...

Things to modify:
-Make the source insertion be able to handle errors!

-Make a user interface that allows you to delete a source

-Set up crontab to run this automatically daily

-Set up limits to how many new articles can be added, or have the database
start deleting older files articles! :D
* the date_added column for articles is db.DateTime, default=datetime.datetime.utcnow)
https://hartmans.livejournal.com/96592.html
** When you subtract datetime.datetime.utcnow from date_added the result is in the format
of datetime.timedelta().
datetime.timedelta() has the syntax timedelta(days, seconds, microseconds, milliseconds, minutes, hours, weeks)

SO I'M going to make a classmethod function that deletes the articles that have been in the
database for greater than a certain timedelta(day) time by subtracting now from date_added
** OK my formula isn't work, I don't know why yet :( )


-make the css layout better! :D (titles above each box)

-understand how the articles are getting inserted... b/c I only understand
how the sources are getting inserted...
***I forgot that I started to watch the 09 video of the series and
he made the run.py file that iterates over the inserted sources.

What are environmental variables?

What is echo in bash?

Learn more about bash!

What is the config.py file and how does it work?

what is the .env file and how does it work?

what is the bashrc file and how do I make one?

THINGS I'VE UPDATED:

1. Making a function that deletes all articles from the db that are 3 or more days old
Things I had to get right to make this work:

on run.py:
articles.Article.delete_from_db() [correct syntax]
also this had to be within the app context!

on articles.py:
I had to extract the day from the datetime.datetime.utcnow() object !
I did that for both the now variable I made and also for the
date_added variable, which represents the date_added field of the Article
table. the date_added field is in the datetime.datetime.utcnow() format obvs.
I think if you subtract two datetime.datetime.utcnow()'s from eachother you end up
with a datetime.timedelta() object... so taht's what i was using timedelta at first.
[also ntoe that it's datetime.timedelta() not datetime.datetime.timedelta()]
but I ended up needing to extract just the day from timedelta()... and you do that by
timedelta().days
but that ends up being an integer
and subtracting two datetime.datetime.utcnow().day objects from eachother is also an integer
so....
I think i could replace my time_diff_days with just the integer of the days I want to delete after
but w/e.

I used a for loop to access each row in the article table, and called each row 'article'
I accessed the date_added attribute of the Article table by article.date_added
I assigned that to date_added variable, then got the .day component from datetime...

I made a formula that subtracts the now_day from date_added_day

I made a SQLAlchemy delete query using the syntax
d = Article.__table__.delete().where(subtract_date(now_day, date_added_day) >= time_diff)

I'm not exactly sure why I had to use the Article.__table__ instead of just Article.delete()
... maybe I can find out why now..

I included the db.engine.execute(d) within the for loop
also in the where clause I used the subtract_date function just to simplify what I'd have to write.


2. Modifying the index_get() function of __init__.py (within routes) and the corresponding html template
to display a separate list of articles for each news source.

3. The CSS layout (getting subtitles above, floating the divs)

4. Getting crontab to run run.py:
[nvm this didn't work :(]
$ crontab -l
should return nothing
$ crontab -e
press I to edit in VIM
* * * * * sudo python /Users/HomeFolder/taskqueue_tut/run.py
ESC
:wq


THINGS TO UPDATE:

1. I want to make use crontab to run, run.py
2. I want to create a file to clear the cache so I don't have to do it manually!
